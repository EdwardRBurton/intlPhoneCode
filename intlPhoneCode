//Author: Ed Burton
//Company: Dematic/Kion Group
//Version: 2.0
//Date:09.16.2022

//injecting syles to head of document
function appendStyle(styles) {
  //build the style node
  console.log("appendStyle is called");
  var css = document.createElement("style");
  css.type = "text/css";

  if (css.styleSheet) css.styleSheet.cssText = styles;
  else css.appendChild(document.createTextNode(styles));
  //Append style node to the head
  document.getElementsByTagName("head")[0].appendChild(css);
}

//Attach various CSS styles
var styles = ".hide { display: none !important; }";
styles += ".iti__flag-container { display: none !important;}";
styles +=
  ".iti--allow-dropdown input { padding-right: 6px; padding-left: 0px !important; margin-left: 0;}";
styles +=
  "#valid-msg { display: block; margin-left: auto; margin-right: auto;}";
styles +=
  "#error-msg { display: block; margin-left: auto; margin-right: auto;}";
//adding link and scripts
//intlTelInput JS1
if (!document.getElementById("id1")) {
  var script = document.createElement("script");
  script.id = "id1";
  script.src =
    "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js";
  document.head.appendChild(script);
}
//intlTelInput styles
if (!document.getElementById("id2")) {
  var link = document.createElement("link");
  link.id = "id2";
  link.rel = "stylesheet";
  link.href =
    "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.css";
  document.head.appendChild(link);
}

//Check if form is there, if it is, check for phone field and run intlphone code.
//Check if sales field is there, then run mktoPersonInterest.
var checkMKTOForm = function () {
  console.log("checkMKTOform is called");
  /*all issues are in this function--when checkMKTOform is called, the form is not loaded. 
  Need to find a way to wait until form is called, then check for form fields and values
  function is being called just when form exists. 
  logic it wrong and "do nothing else statement is being called"
  need to use formExists htmlCollection to check for the proper fields
  call the next correct function based on values
  */
  var formExists = document.getElementsByTagName("form");
  var salesFieldExists = document.querySelector("#mktoPersonInterest");
  var phoneFieldExists = document.querySelector("#Phone");
  if (formExists !== null && salesFieldExists !== null) {
    //call mktoPersonInterest if fied is present
    console.log("checkMKTOform is called, and says call mktoPersonInterest");
    mktoPersonInterest();
  } else if (phoneFieldExists !== null) {
    //call intlMKTOPhone function
    console.log("checkMKTOform is called, and says call intlMKTOPhone");
    intlMKTOPhone();
  } else {
    //do nothing
    console.log("checkMKTOform is called, and says do nothing");
    console.log("formExists:" + formExists); //expecting this to be null
    console.log(formExists);
    console.log("phoneFieldExists:" + phoneFieldExists); //expecting this to be null
  }
};

//function to check if mktoPersonInterest value is I want to speak to a salesperson
var mktoPersonInterest = function () {
  console.log("mktoPersonInterest is called");
  var select = document.getElementById("mktoPersonInterest"); //focus on the select field
  //var options = select.options; //get the options from the field
  var salesSelect = document.querySelector("#mktoPersonInterest");

  // listen to the sales input for changes
  salesSelect.addEventListener("change", function (e) {
    //if mktoPersonInterest field contains sales, call-fire intlMKTOPhone()
    //else do nothing
    var salesSelectOutput = salesSelect.value;
    if (salesSelectOutput == "I want to speak with a salesperson") {
      //call intlMKTOPhone
      intlMKTOPhone();
    } else {
      //Do nothing;
    }
    //checks country code and phone are the same Removed per Malika
    //countryInputField.value = phoneInput.getSelectedCountryData().iso2;
  });
};

//intlMKTOPhone function expression to call when MKTO form with phone field is loaded
var intlMKTOPhone = function () {
  console.log("intlMKTOPhone is called");
  const phoneInputField = document.querySelector("#Phone");
  const countryData = window.intlTelInputGlobals.getCountryData();
  const countryInputField = document.querySelector("#Country");
  const errorMsg = document.querySelector("#error-msg");
  const validMsg = document.querySelector("#valid-msg");
  var fullIntlNumber = "";
  // here, the index maps to the error code returned from getValidationError - see readme https://github.com/jackocnr/intl-tel-input#features
  var errorMap = ["&#10060;", "&#10060;", "&#10060;", "&#10060;", "&#10060;"];
  //init plugin
  const phoneInput = window.intlTelInput(phoneInputField, {
    autoPlaceholder: "aggressive", //shows the country phone number formate in the placeholder
    hiddenInput: "full",
    utilsScript:
      "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
  });

  // populate the country dropdown without non USA country names in the selection
  for (var i = 0; i < countryData.length; i++) {
    var country = countryData[i];
    var optionNode = document.createElement("option");
    optionNode.value = country.iso2;
    var englishCountryName = country.name.replace(/ \(.*$/g, ""); //removed non-english characters from form submission

    var textNode = document.createTextNode(englishCountryName);
    optionNode.appendChild(textNode);
    countryInputField.appendChild(optionNode);
  }
  // set it's initial value
  countryInputField.value = phoneInput.getSelectedCountryData().iso2;
  // removed per Doug and Malika for edge case of Germans carrying a French mobile number
  // listen to the telephone input for changes
  phoneInputField.addEventListener("countrychange", function (e) {
    countryInputField.value = phoneInput.getSelectedCountryData().iso2;
  });

  // listen to the address dropdown for changes
  countryInputField.addEventListener("change", function () {
    phoneInput.setCountry(this.value);
  });

  // validation by country

  // reset error message
  var reset = function () {
    phoneInputField.classList.remove("error");
    errorMsg.innerHTML = "";
    errorMsg.classList.add("hide");
    validMsg.classList.add("hide");
  };

  // on blur: validate
  phoneInputField.addEventListener("blur", function () {
    reset();
    if (phoneInputField.value.trim()) {
      if (phoneInput.isValidNumber()) {
        //validMsg.classList.remove("hide"); remove comment to show valid message removed per Malika
        //set form as submittable
        MktoForms2.whenReady(function (form) {
          form.submittable(true);
        });
      } else {
        phoneInputField.classList.add("error");
        var errorCode = phoneInput.getValidationError();
        errorMsg.innerHTML = errorMap[errorCode];
        errorMsg.classList.remove("hide");
        //form not submittable
        MktoForms2.whenReady(function (form) {
          form.submittable(false);
        });
      }
    }
  });

  // on keyup / change flag: reset
  phoneInputField.addEventListener("change", reset);
  phoneInputField.addEventListener("keyup", reset);

  //add on change event listener to phone field

  phoneInputField.addEventListener("blur", function () {
    fullIntlNumber = phoneInput.getNumber(); //use .getNumber() to include dial
    setPhoneToFull();
  });
  function setPhoneToFull() {
    phoneInputField.value = fullIntlNumber;
  }
  //closing bracket
};
//function to inti code
function initIntlPhone() {
  mktoPersonInterest();
}
//Add code on page load
//window.addEventListener("load", checkMKTOForm, appendStyle(styles));

window.addEventListener("load", () => {
  appendStyle(styles);
  checkMKTOForm();
});
